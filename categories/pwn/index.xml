<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pwn on 诚安</title>
    <link>https://winsun.github.io/fightsec/categories/pwn/</link>
    <description>Recent content in pwn on 诚安</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 20 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://winsun.github.io/fightsec/categories/pwn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>pie绕过</title>
      <link>https://winsun.github.io/fightsec/post/pwn_18_bypass_pie/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_18_bypass_pie/</guid>
      <description>pie PIE（Position Independent Executable，可移植执行码）是一种特殊的执行文件格式，常用于保护程序执行空间的受限和安全性。使用 PIE 能够让加载到内存的代码不会固定地映射到特定的地址，每次加载时都能让其他程序更难预测它想要加载到哪里。 代码重定位的例子有：加载时技术（load-ti</description>
    </item>
    
    <item>
      <title>stack canary泄露方法</title>
      <link>https://winsun.github.io/fightsec/post/pwn_17_stack_canary/</link>
      <pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_17_stack_canary/</guid>
      <description>什么是canary security cookies，Assume that at the beginning of a function call (e.g. during its prologue) we are saving a value in the function’s stack frame, we would expect (! if everything went well !) to read the same value just before the function exits or namely at its epilogue. If the value has changed, then the execution of the program will be terminated and an error message will be displayed. [1] Obviously, this protection mechanism is added by the compiler during the compilation process. For the GNU Compiler Collection (gcc), it is implemented via the StackGuard extension which was added to gcc 2.7.2.2 [1] Bypass stack canary 漏洞程</description>
    </item>
    
    <item>
      <title>字符串漏洞：任意写</title>
      <link>https://winsun.github.io/fightsec/post/pwn_16_wformatstr/</link>
      <pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_16_wformatstr/</guid>
      <description>vuln.c #include &amp;lt;stdio.h&amp;gt; int auth = 0; int main() { char password[100]; puts(&amp;#34;Password: &amp;#34;); fgets(password, sizeof password, stdin); printf(password); printf(&amp;#34;Auth is %i\n&amp;#34;, auth); if(auth == 10) { puts(&amp;#34;Authenticated!&amp;#34;); } } 程序分析 程序保护 gcc -m32 -no-pie -fno-stack-protector -z execstack vuln.c -o vuln $ checksec --file=./vuln [*] &amp;#39;/home/kali/exploits/str_arb_write/vuln&amp;#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments 栈布局 $ ./vuln Password: %p %p %p %p %p %p %p %p %p %p %p 0x64 0xf7e1d620 0x804918d 0xf7ffdbac 0x1 0xf7fc17c0 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 Auth is 0 ascii hex % 0x25 &amp;quot; &amp;quot; 0x20 p 0x70 第7个dword存放格式化字符串 3. 构建利用栈 栈偏移 栈内容</description>
    </item>
    
    <item>
      <title>unlink exploit</title>
      <link>https://winsun.github.io/fightsec/post/pwn_14_unlinkexp/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_14_unlinkexp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>字符串漏洞: 任意读</title>
      <link>https://winsun.github.io/fightsec/post/pwn_15_formatstr/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_15_formatstr/</guid>
      <description>任意读 vuln.c #include &amp;lt;stdio.h&amp;gt; int main(void) { char buffer[200]; gets(buffer); printf(buffer); return 0; } 漏洞分析 编译程序 gcc -m32 -no-pie -fno-stack-protector -z execstack vuln.c -o vuln 分析程序 程序保护 └─$ checksec --file=./vuln [*] &amp;#39;/home/kali/exploits/str_arb_read/vuln&amp;#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments r2 debug vuln └─$ r2 -d -A ./vuln glibc.fc_offset = 0x00148 experimental analysis. [0xf7fe4450]&amp;gt; s main;pdf ; DATA XREFS from entry0 @ 0x8049086, 0x804908c ┌ 83: int main (char **argv); │ ; var int32_t var_d0h @ ebp-0xd0 │ ; var int32_t var_8h @ ebp-0x8 │ ; arg char **argv @ esp+0xf4 │ 0x08049172 8d4c2404 sub esp, 0xc │ 0x080491a7 8d8530ffffff lea eax, [var_d0h] │ 0x080491ad 50 push eax │ 0x080491ae</description>
    </item>
    
    <item>
      <title>double free</title>
      <link>https://winsun.github.io/fightsec/post/pwn_13_doublefree/</link>
      <pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_13_doublefree/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ret2csu</title>
      <link>https://winsun.github.io/fightsec/post/pwn_12_uaf/</link>
      <pubDate>Wed, 09 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_12_uaf/</guid>
      <description></description>
    </item>
    
    <item>
      <title>use after free</title>
      <link>https://winsun.github.io/fightsec/post/pwn_11_heap_overflow/</link>
      <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_11_heap_overflow/</guid>
      <description>配置docker环境 ### pull ubuntu 16.04 image sudo docker pull ubuntu:16.04 ### 进入终端 sudo docker run -ti --rm ubuntu:16.04 /bin/bash ### 安装gcc apt update &amp;amp;&amp;amp; apt install gcc ### gcc 版本 root@687e398bdbdb:/# gcc --version gcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609 Copyright (C) 2015 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. ### 安装 radare2 apt install radare2 漏洞程序 #include &amp;lt;err.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; struct data { char name[64]; }; struct fp { void (*fp)(); char __pad[64 - sizeof(unsigned long)]; }; void winner() { printf(&amp;#34;Congratulations, you have passed this level\n&amp;#34;); } void nowinner() { printf( &amp;#34;level has</description>
    </item>
    
    <item>
      <title>stack pivoiting</title>
      <link>https://winsun.github.io/fightsec/post/pwn_10_stack_pivoiting/</link>
      <pubDate>Sat, 29 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_10_stack_pivoiting/</guid>
      <description>1 what stack pivoiting是一种栈空间转移技术 2 why 有时候缓冲区有长度限制，不利于在栈上配置rop gadget(空间不够)！ 3 how 3.1 pop rsp gadget 这种情形比较少见，遇到了相当幸运～ 3.2 xchg , rsp pop &amp;lt;reg&amp;gt; &amp;lt;=== return pointer &amp;lt;reg value&amp;gt; xchg &amp;lt;rag&amp;gt;, rsp 3.3 leave;ret leave相当于： mov rsp,rbp pop rbp 加上ret就等于： mov rsp,rbp pop rbp pop rip 覆盖rbp，然后栈中的ri</description>
    </item>
    
    <item>
      <title>ret2csu</title>
      <link>https://winsun.github.io/fightsec/post/pwn_09_ret2csu/</link>
      <pubDate>Mon, 24 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_09_ret2csu/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ret2reg</title>
      <link>https://winsun.github.io/fightsec/post/pwn_08_ret2reg/</link>
      <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_08_ret2reg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ret2dlresolve</title>
      <link>https://winsun.github.io/fightsec/post/pwn_07_ret2dlresolve/</link>
      <pubDate>Fri, 14 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_07_ret2dlresolve/</guid>
      <description></description>
    </item>
    
    <item>
      <title>SROP</title>
      <link>https://winsun.github.io/fightsec/post/pwn_06_srop/</link>
      <pubDate>Sun, 09 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_06_srop/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ret2plt</title>
      <link>https://winsun.github.io/fightsec/post/pwn_05_ret2plt/</link>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_05_ret2plt/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ret2libc</title>
      <link>https://winsun.github.io/fightsec/post/pwn_04_ret2libc/</link>
      <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_04_ret2libc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>shellcode</title>
      <link>https://winsun.github.io/fightsec/post/pwn_03_shellcode/</link>
      <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_03_shellcode/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ROP</title>
      <link>https://winsun.github.io/fightsec/post/pwn_02_rop/</link>
      <pubDate>Sat, 24 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_02_rop/</guid>
      <description>ROP Returned-oriented Program,defeats the W⊕X protections recently deployed by Microsoft,Intel, and AMD;in this context, it can be seen as a generalization of traditional return-into-libc attacks. But the threat is more general . gadget what gadget Each gadget is an arrangement of words on the stack, both pointers to instruction sequences and immediate data words, that when invoked accomplishes some well-defined task “W⊕X,” ensures that no memory location in a process image is marked both writable (“W”) and executable (“X”) gadget feature One gadget might: perform a load operation another an xor and another a conditional branch 引用 detetcting rop attacks in application jit-rop rop systems,languages,and applications dark-rop black hat rop ropme write up</description>
    </item>
    
    <item>
      <title>pwn</title>
      <link>https://winsun.github.io/fightsec/post/pwn_01_pwntools/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_01_pwntools/</guid>
      <description>python pwn pwntools github
pwntools doc
Writing Exploits with pwntools</description>
    </item>
    
    <item>
      <title>Linux Kernel Exploitation Technique: Overwriting: modprobe_path</title>
      <link>https://winsun.github.io/fightsec/post/p02_pwn_04_exp_kernel/</link>
      <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/p02_pwn_04_exp_kernel/</guid>
      <description>引用 Overwriting modprobe_path Linux Kernel Exploitation</description>
    </item>
    
    <item>
      <title>虚拟化研究框架</title>
      <link>https://winsun.github.io/fightsec/post/p02_pwn_05_hypervisor/</link>
      <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/p02_pwn_05_hypervisor/</guid>
      <description>kali install kvm kali install kvm</description>
    </item>
    
  </channel>
</rss>
