<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>linux on 诚安</title>
    <link>https://winsun.github.io/categories/linux/</link>
    <description>Recent content in linux on 诚安</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 03 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://winsun.github.io/categories/linux/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>linux kernel : system call</title>
      <link>https://winsun.github.io/post/knl_02_syscall/</link>
      <pubDate>Fri, 03 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/post/knl_02_syscall/</guid>
      <description></description>
    </item>
    
    <item>
      <title>linux kernel : process</title>
      <link>https://winsun.github.io/post/knl_01_process/</link>
      <pubDate>Thu, 02 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/post/knl_01_process/</guid>
      <description>task_struct task_struct &amp;amp; thread_info process state zombie fork &amp;amp; exec process</description>
    </item>
    
    <item>
      <title>linux shell and makefile</title>
      <link>https://winsun.github.io/post/linux_16_shell/</link>
      <pubDate>Wed, 14 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/post/linux_16_shell/</guid>
      <description>shell Bash脚本编程 makefile learn makefiles</description>
    </item>
    
    <item>
      <title>gcc</title>
      <link>https://winsun.github.io/post/linux_15_gcc/</link>
      <pubDate>Fri, 09 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/post/linux_15_gcc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>vfs重要数据结构</title>
      <link>https://winsun.github.io/post/linux_14_filesystem/</link>
      <pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/post/linux_14_filesystem/</guid>
      <description></description>
    </item>
    
    <item>
      <title>网络编程</title>
      <link>https://winsun.github.io/post/linux_13_network/</link>
      <pubDate>Mon, 29 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/post/linux_13_network/</guid>
      <description></description>
    </item>
    
    <item>
      <title>system call</title>
      <link>https://winsun.github.io/post/linux_12_syscall/</link>
      <pubDate>Wed, 24 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/post/linux_12_syscall/</guid>
      <description>linux linux windows windows 引用 system call syscall under-the-hood</description>
    </item>
    
    <item>
      <title>aslr保护机制</title>
      <link>https://winsun.github.io/post/linux_09_ASLR/</link>
      <pubDate>Fri, 19 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/post/linux_09_ASLR/</guid>
      <description></description>
    </item>
    
    <item>
      <title>canary保护机制</title>
      <link>https://winsun.github.io/post/linux_08_stack_canary/</link>
      <pubDate>Sun, 14 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/post/linux_08_stack_canary/</guid>
      <description></description>
    </item>
    
    <item>
      <title>NX保护机制</title>
      <link>https://winsun.github.io/post/linux_07_NX/</link>
      <pubDate>Tue, 09 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/post/linux_07_NX/</guid>
      <description>NX开启状态 $ checksec vuln [*] &amp;#39;~/vuln&amp;#39; Arch: amd64-64-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x400000) the NX bit. The NX bit has the effect of preventing memory areas not supposed to contain code (typically, the stack) from being executed ROP mprotect sigreturn</description>
    </item>
    
    <item>
      <title>pie&amp;pic</title>
      <link>https://winsun.github.io/post/linux_06_PIE_PIC/</link>
      <pubDate>Thu, 04 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/post/linux_06_PIE_PIC/</guid>
      <description></description>
    </item>
    
    <item>
      <title>GOT&amp;PLT</title>
      <link>https://winsun.github.io/post/linux_03_got_plt/</link>
      <pubDate>Wed, 24 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/post/linux_03_got_plt/</guid>
      <description>gdb调试overbuffer objdump readelf string symbol table GOT PLT</description>
    </item>
    
    <item>
      <title>linux环境和相关工具</title>
      <link>https://winsun.github.io/post/linux_02_elf_tools/</link>
      <pubDate>Fri, 19 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/post/linux_02_elf_tools/</guid>
      <description>工具列表 GDB objdump objcopy strace system call trace ltrace library trace ftrace function trace readelf 有用的设备和文件 /proc/&amp;lt;pid&amp;gt;/maps ls /proc/1234/maps /proc/kcore /boot/System.map /proc/kallsyms /proc/iomem ECFS Extended core file snapshotECFS 环境变量 LD_PRELOAD LD_SHOW_AUXV</description>
    </item>
    
    <item>
      <title>ELF格式</title>
      <link>https://winsun.github.io/post/linux_01_elf/</link>
      <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/post/linux_01_elf/</guid>
      <description>elf格式 elf header man elf查看 ELF header (Ehdr) The ELF header is described by the type Elf32_Ehdr or Elf64_Ehdr: #define EI_NIDENT 16 typedef struct { unsigned char e_ident[EI_NIDENT]; uint16_t e_type; uint16_t e_machine; uint32_t e_version; ElfN_Addr e_entry; ElfN_Off e_phoff; ElfN_Off e_shoff; uint32_t e_flags; uint16_t e_ehsize; uint16_t e_phentsize; uint16_t e_phnum; uint16_t e_shentsize; uint16_t e_shnum; uint16_t e_shstrndx; } ElfN_Ehdr; $ readelf -h vuln ELF Header: Magic: 7f 45 4c 46 02 01 01 00 00 00 00 00 00 00 00 00 Class: ELF64 Data: 2&amp;#39;s complement, little endian Version: 1 (current) OS/ABI: UNIX - System V ABI Version: 0 Type: DYN (Position-Independent Executable file) Machine: Advanced Micro Devices X86-64 Version: 0x1 Entry point address: 0x11a0 Start of program headers: 64 (bytes into file) Start of section headers: 15344 (bytes into file) Flags: 0x0 Size</description>
    </item>
    
    <item>
      <title>GDB及扩展</title>
      <link>https://winsun.github.io/post/linux_05_gdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/post/linux_05_gdb/</guid>
      <description>gdb gdbinit配置 可以从网上或自己编写 .gdbinit 配置文件, 从网上找到一份配置 config one 地址 https://github.com/gdbinit/Gdbinit 安装: git clone git@github.com:gdbinit/Gdbinit.git cp Gdbinit/gdbinit ~/.gdbinit config two wget https://raw.githubusercontent.com/gdbinit/Gdbinit/master/gdbinit cp gdbinit ~/.gdbinit gef gef A few of GEF features include: 1、One single GDB script Entirely OS Agnostic, NO dependencies: GEF is battery-included and is installable instantly Fast limiting the number of dependencies and optimizing code to make the commands as fast as possible 2、Provides a great variety of commands to drastically change your experience in GDB. Easily extensible to create other commands by providing more comprehensible layout to GDB Python API. 3、</description>
    </item>
    
  </channel>
</rss>
