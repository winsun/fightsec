<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vuln on 诚安</title>
    <link>https://winsun.github.io/fightsec/tags/vuln/</link>
    <description>Recent content in vuln on 诚安</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 18 Jun 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://winsun.github.io/fightsec/tags/vuln/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>stack canary泄露方法</title>
      <link>https://winsun.github.io/fightsec/post/pwn_17_stack_canary/</link>
      <pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_17_stack_canary/</guid>
      <description>什么是canary security cookies，Assume that at the beginning of a function call (e.g. during its prologue) we are saving a value in the function’s stack frame, we would expect (! if everything went well !) to read the same value just before the function exits or namely at its epilogue. If the value has changed, then the execution of the program will be terminated and an error message will be displayed. [1] Obviously, this protection mechanism is added by the compiler during the compilation process. For the GNU Compiler Collection (gcc), it is implemented via the StackGuard extension which was added to gcc 2.7.2.2 [1] Bypass stack canary 漏洞程</description>
    </item>
    
    <item>
      <title>字符串漏洞：任意写</title>
      <link>https://winsun.github.io/fightsec/post/pwn_16_wformatstr/</link>
      <pubDate>Fri, 18 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_16_wformatstr/</guid>
      <description>vuln.c #include &amp;lt;stdio.h&amp;gt; int auth = 0; int main() { char password[100]; puts(&amp;#34;Password: &amp;#34;); fgets(password, sizeof password, stdin); printf(password); printf(&amp;#34;Auth is %i\n&amp;#34;, auth); if(auth == 10) { puts(&amp;#34;Authenticated!&amp;#34;); } } 程序分析 程序保护 gcc -m32 -no-pie -fno-stack-protector -z execstack vuln.c -o vuln $ checksec --file=./vuln [*] &amp;#39;/home/kali/exploits/str_arb_write/vuln&amp;#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments 栈布局 $ ./vuln Password: %p %p %p %p %p %p %p %p %p %p %p 0x64 0xf7e1d620 0x804918d 0xf7ffdbac 0x1 0xf7fc17c0 0x25207025 0x70252070 0x20702520 0x25207025 0x70252070 Auth is 0 ascii hex % 0x25 &amp;quot; &amp;quot; 0x20 p 0x70 第7个dword存放格式化字符串 3. 构建利用栈 栈偏移 栈内容</description>
    </item>
    
    <item>
      <title>字符串漏洞: 任意读</title>
      <link>https://winsun.github.io/fightsec/post/pwn_15_formatstr/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_15_formatstr/</guid>
      <description>任意读 vuln.c #include &amp;lt;stdio.h&amp;gt; int main(void) { char buffer[200]; gets(buffer); printf(buffer); return 0; } 漏洞分析 编译程序 gcc -m32 -no-pie -fno-stack-protector -z execstack vuln.c -o vuln 分析程序 程序保护 └─$ checksec --file=./vuln [*] &amp;#39;/home/kali/exploits/str_arb_read/vuln&amp;#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX disabled PIE: No PIE (0x8048000) RWX: Has RWX segments r2 debug vuln └─$ r2 -d -A ./vuln glibc.fc_offset = 0x00148 experimental analysis. [0xf7fe4450]&amp;gt; s main;pdf ; DATA XREFS from entry0 @ 0x8049086, 0x804908c ┌ 83: int main (char **argv); │ ; var int32_t var_d0h @ ebp-0xd0 │ ; var int32_t var_8h @ ebp-0x8 │ ; arg char **argv @ esp+0xf4 │ 0x08049172 8d4c2404 sub esp, 0xc │ 0x080491a7 8d8530ffffff lea eax, [var_d0h] │ 0x080491ad 50 push eax │ 0x080491ae</description>
    </item>
    
  </channel>
</rss>
